{
  "Building User Interfaces with Flutter": {
    "Introduction": {
      "description": "Building UI with Flutter",
      "note": "Check out building layouts and adding interactivity to your Flutter app"
    },
    "Hello World": {
      "code": "runApp(MyApp());",
      "description": "Minimal Flutter app with a Center widget and a Text widget"
    },
    "Basic Widgets": {
      "widgets": [
        {
          "name": "Text",
          "description": "Create a run of styled text within your application"
        },
        {
          "name": "Row",
          "description": "Create flexible layouts in the horizontal direction"
        },
        {
          "name": "Column",
          "description": "Create flexible layouts in the vertical direction"
        },
        {
          "name": "Stack",
          "description": "Place widgets on top of each other in paint order"
        },
        {
          "name": "Container",
          "description": "Create a rectangular visual element"
        }
      ]
    },
    "Using Material Components": {
      "description": "Use Material Design widgets to build apps that follow Material Design",
      "widgets": [
        {
          "name": "MaterialApp",
          "description": "Builds a number of useful widgets at the root of your app"
        },
        {
          "name": "AppBar",
          "description": "Creates a Material Design app bar"
        },
        {
          "name": "Scaffold",
          "description": "Organizes its children in a vertical column"
        }
      ]
    },
    "Handling Gestures": {
      "description": "Detect input gestures using the GestureDetector widget",
      "code": "GestureDetector(onTap: () => print('Tap detected'))"
    },
    "Changing Widgets in Response to Input": {
      "description": "Use StatefulWidgets to capture state and react to user input",
      "code": "ElevatedButton(onPressed: () => setState(() => _counter++))"
    },
    "Bringing it all Together": {
      "description": "Example of a shopping application that displays products and maintains a shopping cart",
      "code": "ShoppingListItem(product: product, inCart: inCart, onCartChanged: onCartChanged)"
    },
    "Responding to Widget Lifecycle Events": {
      "description": "Use initState and dispose to do work that needs to happen just once",
      "code": "initState() { super.initState(); }"
    },
    "Keys": {
      "description": "Use keys to control which widgets the framework matches up with other widgets when a widget rebuilds",
      "code": "ShoppingList(items: items, key: Key('shopping_list'))"
    },
    "Global Keys": {
      "description": "Use global keys to uniquely identify child widgets",
      "code": "GlobalKey<ShoppingListState>(debugLabel: 'hopping_list_key')"
    }
  }
}
